Here, we will define a function for a simple recursive generator, which will be implemented in the Assessment section.  Some of the steps are completed in the code below, however you will need to fill in some blanks.  
Note: In this problem, we will implement a user-defined function using the function syntax in Matlab.  To define a function, fill in the blanks in the function at the end of the script. 
Consider the generator with  , and

Go to the bottom of the script, and fill in the blanks to define a function for a linear random number generator. 
In line 7 of the script, generate the first 50 observations by calling the user-defined function lcg at the bottom of the script: lcg(x0,a,c,m,n)'.  Call this x.
Define an array called i with the indeces of x whose value is equal to the seed.  
Find the period of the generator and call this p
Convert the output of the generator to u, values between 0 and 1 (use the adjusted values so that u does not take on the value 0)
Uncomment the code in lines 15-22 to produce a histogram of u, and scatterplot of points (u(i),u(i+1)).
Generate 50 new observations with the 'lcg' function using the new parameters defined in lines 25 and 26 (that is, our new generator is  with ).  Call this x1.
Compute the period of the new generator and call this p1.
Convert the new output to values between 0 and 1, and call this u1.
Copy and paste the 'Plots' code from Step 6 (lines 15-22) and modify to plot the appropriate histogram and scatterplot for u1.
Go to Gradescope and type in your answers to the following questions: 
Question A: Between the first and second generator, which produces the greatest number of unique observations?  How can you tell?
Question B:  Compare each pair of plots.  Based on your analysis, which generator works better for generating random numbers? Explain your reasonin


% Set Parameters of lcg
a=13; c=23; m=100; % Fixes the parameters of the LCG
x0=4;  % Seed
n=50;  % Number of values generated

% Steps 2-4: Find period
x= lcg(x0,a,c,m,n) ; 
i=find(x==x0) ;  % Hint: Use 'find(...)' to find the needed indices in x.
p= i(2)-1

% Step 5: Generate numbers between 0 and 1
u= (x+0.5)/m  

% Step 6: Plots
figure;
subplot(1,2,1);
histogram(u,linspace(0,1,10),'Normalization','probability');
title('Histogram of u')

subplot(1,2,2);
scatter(u(1:n-1),u(2:n));
title('Scatter plot of (u(i),u(i+1))')

% Steps 7-9: Define new parameters, and compute new output and period
a1=1; c1=2; m1=98; % New parameters
x0=1;  % Seed

x1= lcg(x0,a1,c1,m1,n)
i1=find(x1==x0) 
p1=i1(2)-1
u1=(x1+0.5)/m1

% Step 10: More plots
% Copy and paste the code from Step 6 below, and modify to plot the new observations (i.e. change 'u' to 'u1').
figure;
subplot(1,2,1);
histogram(u1,linspace(0,1,10),'Normalization','probability');
title('Histogram of u1')

subplot(1,2,2);
scatter(u1(1:n-1),u1(2:n));
title('Scatter plot of (u1(i),u1(i+1))')











% Step 1: Define LCG function
% Note: In Matlab, multi-line functions must be defined at the end of the script.

% Define a function called 'lcg' which returns an array of length n, where the elements are values generated by the linear generator, with parameters a, c, and m
function x=lcg(x0,a,c,m,n)
x=zeros(1,n);
x(1)= x0  % First value in the generator
for i=2:n;
    x(i)= rem(a*x(i-1)+c,m) % Hint: Use the 'mod()' function
    
end
end





randoness and digits of pi
Digits of the number pi: how 'random' are they? Can they be distinguished from output from a random number generator? Let's find out!  In this problem, we will use the Pearson test statitic as to check the 'randomness' of the first 100 digits of pi.
The array called digits defined below stores the first 100 digits of pi.  Verify that the number of digits is correct by computing the number of elements in the array.  Store this in a variable called N.
How many unique values does the data in 'digits' contain? Store this number in a variable called K. 
To produce a histogram of the data contained in some array X with N bins, use the function histogram(X, N).  Produce a histogram of the first 100 digits of pi with an appropriate number of bins. Based on your histogram, what prediction would you make about the uniformity of the data? Input your answer into Gradescope (Part 2: Question A). 
Define an array called O with K elements, where each element of O contains the amount of datapoints in each category.  I.e., O(1) is the number of 0's in digits, O(2) is the number of 1's, etc.  The sum of all elements in O should equal 100.  
Define a variable called Ek, and set it equal to the expected number of observations in each bin, assuming the data are uniformly distributed.
Compute the test sastistic for the Pearson's goodness of fit test.  Call this D.
Compute the p-value using the chi2cdf(D,nu) function, where nu is the degree of freedom. Call this p. [Hint: p does not simply equal chi2cdf(D,nu).]
Based on your result, should we reject the hypothesis that the digits of pi are uniformly distributed? Explain. Input your answer into Gradescope (Part

digits=[3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0 2 8 8 4 1 9 7 1 6 9 3 9 9 3 7 5 1 0 5 8 2 0 9 7 4 9 4 4 5 9 2 3 0 7 8 1 6 4 0 6 2 8 6 2 0 8 9 9 8 6 2 8 0 3 4 8 2 5 3 4 2 1 1 7 0 6 7];
N = length(digits)
K=10
X=[0:N]
histogram(X,N)

O = ones(1,K)

for j=1:K
    O(j) = sum(digits ==(j-1));
end

E = N/K*ones(1,10);
Ek = N/K
%part 6
D = ones(1,10);
for i=1:10
    D_holder = ((O(i)-E(i)).^2)/(E(i));
    D(i) = D_holder;
end
D=sum(D)

%part 7 

nu = 9
p = 1-chi2cdf(D,nu)
    
    












